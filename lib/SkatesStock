/***********************
 * author: Kevin Liu
 * @kev1nl1u
 * github.com/kev1nl1u
 ***********************/

#pragma once

/***** WARNINGS *****/
#ifdef __APPLE__
	#warning "This program may not run correctly on Apple systems!"
#endif
#ifdef __linux__
	#warning "This program may not run correctly on Linux systems!"
#endif

// libraries
#include "Group"
#include "Skate"
#include <iostream>

using namespace std;

// stock of skates
class Stock{
	private:
		int sizeStart; // smallest size
		int sizeEnd; // biggest size
		int nSkates; // number of skates for size
		int rentals; // number of rentals
		int time; // current time
	public:
		// array of skates by size
		Skate *skateSize;
		// constructor
		Stock(){}
		Stock(int sizeStart, int sizeEnd, int nSkates, int rentals){
			this->sizeStart = sizeStart;
			this->sizeEnd = sizeEnd;
			this->nSkates = nSkates;
			this->rentals = rentals;
			// create array of skates of size*stock
			skateSize = new Skate[sizeEnd-sizeStart+1];
			for(int i=0; i<getNTaglie(); i++) skateSize[i] = Skate(i+sizeStart, nSkates, rentals);
			time = 0;
		}
		/***** GETTERS *****/
		int getSizeStart(){
			return sizeStart;
		}
		int getSizeEnd(){
			return sizeEnd;
		}
		int getNTaglie(){
			return sizeEnd-sizeStart+1;
		}
		int getScorte(int size){
			return skateSize[size-sizeStart].availableSkatesID.size();
		}
		// get skateSize of another array of skates
		int getScorte(Skate *s, int size){
			return s[size-sizeStart].availableSkatesID.size();
		}
		/********************/
		// check if there are enough skates for a group
		bool checkAvailabilityForGroup(Group g){
			// make a copy of the array of skates and subtract the skates that would be used by the group
			Skate *tempScorte = new Skate[getNTaglie()];
			for(int i=0; i<getNTaglie(); i++) tempScorte[i] = skateSize[i];

			for(int i=0; i<g.getNPeople(); i++){
				if(getScorte(tempScorte, g.getSize(i)) == 0) return false;
				tempScorte[g.getSize(i)-sizeStart].useSkate();
			}
			delete[] tempScorte;
			return true;
		}
		// remove skates from stock for a group
		void removeStockForGroup(Group g){ // group enters --> remove Stock
			if(checkAvailabilityForGroup(g)) // double checks
				for(int i=0; i<g.getNPeople(); i++)
					g.setSkateID(i, skateSize[g.getSize(i)-sizeStart].useSkate());
			else{
				cout << "Error: no skates available for group " << g.getID() << endl;
				exit(1);
			}
		}
		// add skates to stock for a group
		void addStockForGroup(Group g){ // group leaves --> add Stock
			// add skates to stock for each person in the group
			for(int i=0; i<g.getNPeople(); i++) skateSize[g.getSize(i)-sizeStart].deuseSkate(g.getSkateID(i));
		}
		// update time
		void updateTime(int time){
			this->time = time;
			// update time for each size
			for(int i=0; i<getNTaglie(); i++) skateSize[i].updateTime(time);
		}
		// calculate expenses from the maintenance of the skates
		double calcExpense(){
			double newExpense=0;
			for(int i=0; i<getNTaglie(); i++) newExpense += skateSize[i].getNewExpense();
			return newExpense;
		}


		// print stock for each size
		friend ostream& operator<<(ostream& os, Stock& s){
			os << "Stock: " << endl;
			for(int i = 0; i < s.getNTaglie(); i++){
				os << s.skateSize[i] << endl;
				os << endl;
			}
			return os;
		}
};
