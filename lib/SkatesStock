#pragma once

#include "Group"
#include "SkateSize"
#include <iostream>

using namespace std;

// stock of skates
class Stock{
	private:
		int sizeStart;
		int sizeEnd;
		int nSkates; // number of skates for size
		int rentals; // number of rentals
		int time;
	public:
		Skate *scorte;
		Stock(){}
		Stock(int sizeStart, int sizeEnd, int nSkates, int rentals){
			this->sizeStart = sizeStart;
			this->sizeEnd = sizeEnd;
			this->nSkates = nSkates;
			this->rentals = rentals;
			// create array of skates of size*stock
			scorte = new Skate[sizeEnd-sizeStart+1];
			for(int i=0; i<getNTaglie(); i++){
				scorte[i] = Skate(i+sizeStart, nSkates, rentals);
			}
			time = 0;
		}
		int getSizeStart(){
			return sizeStart;
		}
		int getSizeEnd(){
			return sizeEnd;
		}
		int getNTaglie(){
			return sizeEnd-sizeStart+1;
		}
		int getScorte(int size){
			return scorte[size-sizeStart].availableSkatesID.size();
		}
		// get scorte of another array of skates
		int getScorte(Skate *s, int size){
			return s[size-sizeStart].availableSkatesID.size();
		}
		bool checkAvailabilityForGroup(Group g){
			// make a copy of the array of skates
			Skate *tempScorte = new Skate[getNTaglie()];
			for(int i=0; i<getNTaglie(); i++){
				tempScorte[i] = scorte[i];
			}
			for(int i=0; i<g.getNPeople(); i++){
				if(getScorte(tempScorte, g.getSize(i)) == 0){
					return false;
				}
				tempScorte[g.getSize(i)-sizeStart].useSkate();
			}
			delete[] tempScorte;
			return true;
		}
		void removeStockForGroup(Group g){ // group enters --> remove Stock
			if(checkAvailabilityForGroup(g)) // double checks
				for(int i=0; i<g.getNPeople(); i++)
					g.setSkateID(i, scorte[g.getSize(i)-sizeStart].useSkate());
			else{
				cout << "Error: no skates available for group " << g.getID() << endl;
				exit(1);
			}
		}
		void addStockForGroup(Group g){
			for(int i=0; i<g.getNPeople(); i++){
				if(i>=g.getNPeople())
					break;
				scorte[g.getSize(i)-sizeStart].deuseSkate(g.getSkateID(i));
				//cout << "Skate " << g.getSize(i) << "ID" << g.getSkateID(i) << " returned" << endl;
			}
			//cout << endl;
		}
		void updateTime(int time){
			this->time = time;
			for(int i=0; i<getNTaglie(); i++){
				scorte[i].updateTime(time);
			}
		}
		double calcExpense(){
			double newExpense=0;
			for(int i=0; i<getNTaglie(); i++){
				newExpense += scorte[i].getNewExpense();
			}
			return newExpense;
		}



		void print(){
			//cout << "Stock: " << endl;
			for(int i=0; i<getNTaglie(); i++){
				cout << "Size: " << i+sizeStart << endl;
				scorte[i].print();
				cout << endl;
			}
		}
};
